// define the Entity Class
// this could be autogenerated by renderer
// from : 
//function Entity() {}
//entity.prototype.walk = function(){
//  alert ('I am walking!');
//};
//entity.prototype.sayHello = function(){
//  alert ('hello');
//};
// define the Student class
//function Student() {
//  // Call the parent constructor
//  Person.call(this);
//}

// inherit Person
//Student.prototype = new Person();

// correct the constructor pointer because it points to Person
//Student.prototype.constructor = Student;

// replace the sayHello method
//Student.prototype.sayHello = function(){
//  alert('hi, I am a student');
//}

// add sayGoodBye method
//Student.prototype.sayGoodBye = function(){
//  alert('goodBye');
//}

//var student1 = new Student();
//student1.sayHello();
//student1.walk();
//student1.sayGoodBye();

// check inheritance
//alert(student1 instanceof Person); // true 
//alert(student1 instanceof Student); // true

/*

uos.classes.entity.prototype.walk = function() {
  alert ('I am walking!');
}

uos.classes.entity.prototype.sayHello = function(){
  alert ('hello');
};

uos.classes.node = function() {
	uos.classes.entity.call(this);
};

// inherit entity
uos.classes.node.prototype = new uos.classes.entity();

// correct the constructor pointer because it points to Person
uos.classes.node.prototype.constructor = uos.classes.node;

// replace the sayHello method
uos.classes.node.prototype.sayHello = function(){
  alert('hi, I am a student');
}

// add sayGoodBye method
uos.classes.node.prototype.sayGoodBye = function(){
  alert('goodBye');
}
*/

// inherit entity
uos.classes.entity = function(initobj) {
	uos.log('entity class',initobj);
	this.data = {};
	this.elementid = '';

	this.actions = {
		init : {
			title : 'Initialise',	
			icon : 'fa-wrench',
			handler : function(initobj) {
				this.data = initobj;
				this.elementid = initobj.instanceid;
				uos.log('called entity init',this.constructor,initobj);
				//this.id = '#'+initobj.instanceid;
			}		
		},
		
		reload : {
			title : 'Reload',
			icon : 'fa-refresh',				
		},
		
		add : {
			title : 'Add',		
			icon : 'fa-plus-circle'	
		},
		
		displayup : {
			title : 'Change Display',	
			icon : 'fa-caret-left',		
			action : function() {
				jQuery.ajax({
				  type: "POST",
				  url: '/global/uos.php',
				  context: document.body,
				  data: {
				  	selection : [4567898765,5645342341],
				  	universe : 'julian'
				  },
				  success: function(e) {
				  	uos.log(e);
				  },
				  //dataType: dataType
				});
			}
		},
		
		displaydown : {
			title : 'Change Display',	
			icon : 'fa-caret-right',	
			action : function() {
			}
		},
		
		edit : {
			title : 'Edit',	
			icon : 'fa-pencil'					
		},
		remove : {
			title : 'Delete',			
			icon : 'fa-trash-o'					
		},
		save : {
			title : 'Save',		
			icon : 'fa-check'					
		},
		cancel : {
			title : 'Cancel',			
			icon : 'fa-times',
			action : function($selection) {
				uos.clearSelected();
			}			
		}
		
		
	};
	
	this.hasAction = function (actionname) {
		return (this.actions[actionname])?true:false;
	};
	
	this.callaction = function(actionname) {
		if (this.hasAction(actionname)) {
			uos.log('Found action',actionname);
			if (this.actions[actionname].handler) {
				uos.log('Action handler found', actionname);				
			} else {
				uos.log('No action handler found', actionname);
			}
		} else {
			uos.log('Action not found',actionname);
		}
	}

	if (this.actions.init.handler) this.actions.init.handler(initobj); 
	
}

//Student.prototype.constructor = Student;




//uos.classes.entity = uos_classes_entity;

/*

uos.classes.entity.prototype.hasAction = function (actionname) {
	return (this.actions[actionname])?true:false;
};


uos.classes.entity.actions = {
	init : {
		title : 'Initialise',	
		icon : 'fa-wrench'		
	},
	
	reload : {
		title : 'Reload',
		icon : 'fa-refresh'						
	},
	
	add : {
		title : 'Add',		
		icon : 'fa-plus-circle'	
	}
};
*/


/*

uos.classes.entity = function {

	hasAction: 	
	actions: {
		init : {
			title : 'Initialise',	
			icon : 'fa-wrench'		
		},
		
		reload : {
			title : 'Reload',
			icon : 'fa-refresh'						
		},
		
		add : {
			title : 'Add',		
			icon : 'fa-plus-circle'	
		},
		
		displayup : {
			title : 'Change Display',	
			icon : 'fa-caret-left',		
			action : function() {
				jQuery.ajax({
				  type: "POST",
				  url: '/global/uos.php',
				  context: document.body,
				  data: {
				  	selection : [4567898765,5645342341],
				  	universe : 'julian'
				  },
				  success: function(e) {
				  	uos.log(e);
				  },
				  //dataType: dataType
				});
			}
		},
		
		displaydown : {
			title : 'Change Display',	
			icon : 'fa-caret-right',	
			action : function() {

			  // modified from view-source:http://mrdoob.github.io/three.js/examples/css3d_periodictable.html
				var camera, scene, renderer;
				var controls;
	
				var objects = [];
				var targets = { table: [], sphere: [], helix: [], grid: [] };


				camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.z = 3000;
				scene = new THREE.Scene();
				
				init();
				animate();
				
				function init() {
					var $nodes = uos.getAllNodes();
					$nodes.each(function (index) {
						jQuery(this).addClass('element');
						jQuery(this).addClass('three-d');
						console.log(this);
						var object = new THREE.CSS3DObject( this ); //??
						object.position.x = Math.random() * 4000 - 2000;
						object.position.y = Math.random() * 4000 - 2000;
						object.position.z = Math.random() * 4000 - 2000;
						scene.add(object);
						objects.push( object );
					});				
	
					//console.log(objects);
			
					var l = objects.length;
					
					// table 
					
					jQuery.each(objects, function(i,o) {
						var object = new THREE.Object3D();
						
						// we can use some element property here
						//object.position.x = ( table[ i + 3 ] * 140 ) - 1330;
						//object.position.y = - ( table[ i + 4 ] * 180 ) + 990;

						//targets.table.push( object );
					});
					
					// sphere
					
					var vector = new THREE.Vector3();
					
					jQuery.each(objects, function(i,o) {
		
						var phi = Math.acos( -1 + ( 2 * i ) / l );
						var theta = Math.sqrt( l * Math.PI ) * phi;
		
						var object = new THREE.Object3D();
		
						object.position.x = 400 * Math.cos( theta ) * Math.sin( phi );
						object.position.y = 400 * Math.sin( theta ) * Math.sin( phi );
						object.position.z = 400 * Math.cos( phi );
		
						vector.copy( object.position ).multiplyScalar( 2 );
		
						object.lookAt( vector );
		
						targets.sphere.push( object );
		
					});
					
					// helix
					var vector = new THREE.Vector3();					

					jQuery.each(objects, function(i,o) {
						var phi = i * 0.175 + Math.PI;
	
						var object = new THREE.Object3D();
	
						object.position.x = 900 * Math.sin( phi );
						object.position.y = - ( i * 8 ) + 450;
						object.position.z = 900 * Math.cos( phi );
	
						vector.x = object.position.x * 2;
						vector.y = object.position.y;
						vector.z = object.position.z * 2;
	
						object.lookAt( vector );
	
						targets.helix.push( object );					
					});
					
					// grid			

					jQuery.each(objects, function(i,o) {
	
						var object = new THREE.Object3D();
	
						object.position.x = ( ( i % 5 ) * 400 ) - 800;
						object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800;
						object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000;
	
						targets.grid.push( object );
	
					});
	
					renderer = new THREE.CSS3DRenderer();
					renderer.setSize( window.innerWidth, window.innerHeight );
					renderer.domElement.style.position = 'absolute';
					jQuery('#container').html( renderer.domElement );
					
					controls = new THREE.TrackballControls( camera, renderer.domElement );
					controls.rotateSpeed = 0.5;
					controls.minDistance = 500;
					controls.maxDistance = 6000;
					controls.addEventListener( 'change', render );
					
					//transform( targets.helix, 5000 );
					transform( targets.sphere, 1000 );
				}	


				function transform( targets, duration ) {
	
					TWEEN.removeAll();
					console.log(objects.length);
					for ( var i = 0; i < objects.length; i ++ ) {
	
						var object = objects[ i ];
						var target = targets[ i ];
	
						new TWEEN.Tween( object.position )
							.to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
							.easing( TWEEN.Easing.Exponential.InOut )
							.start();
	
						new TWEEN.Tween( object.rotation )
							.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
							.easing( TWEEN.Easing.Exponential.InOut )
							.start();
	
					}
	
					new TWEEN.Tween( this )
						.to( {}, duration * 2 )
						.onUpdate( render )
						.start();
	
				}
	
				function onWindowResize() {
	
					camera.aspect = window.innerWidth / window.innerHeight;
					camera.updateProjectionMatrix();
	
					renderer.setSize( window.innerWidth, window.innerHeight );
	
					render();
	
				}
	
				function animate() {
	
					requestAnimationFrame( animate );
	
					TWEEN.update();
	
					controls.update();
	
				}
	
				function render() {
	
					renderer.render( scene, camera );
	
				}		
			}	
		},
		edit : {
			title : 'Edit',	
			icon : 'fa-pencil'					
		},
		remove : {
			title : 'Delete',			
			icon : 'fa-trash-o'					
		},
		save : {
			title : 'Save',		
			icon : 'fa-check'					
		},
		cancel : {
			title : 'Cancel',			
			icon : 'fa-times',
			action : function($selection) {
				uos.clearSelected();
			}			
		}
	}
};


//var student1 = new uos.classes.node();
//student1.sayHello();
//student1.walk();
//student1.sayGoodBye();

// check inheritance
//alert(student1 instanceof uos.classes.entity); // true 
//alert(student1 instanceof uos.classes.node); // true
*/
