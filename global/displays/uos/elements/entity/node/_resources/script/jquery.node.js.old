// define the Entity Class
// this could be autogenerated by renderer
// from : 
//function Entity() {}
//entity.prototype.walk = function(){
//  alert ('I am walking!');
//};
//entity.prototype.sayHello = function(){
//  alert ('hello');
//};
// define the Student class
//function Student() {
//  // Call the parent constructor
//  Person.call(this);
//}

// inherit Person
//Student.prototype = new Person();

// correct the constructor pointer because it points to Person
//Student.prototype.constructor = Student;

// replace the sayHello method
//Student.prototype.sayHello = function(){
//  alert('hi, I am a student');
//}

// add sayGoodBye method
//Student.prototype.sayGoodBye = function(){
//  alert('goodBye');
//}

//var student1 = new Student();
//student1.sayHello();
//student1.walk();
//student1.sayGoodBye();

// check inheritance
//alert(student1 instanceof Person); // true 
//alert(student1 instanceof Student); // true


/*
uos.classes.entity.prototype.walk = function() {
  alert ('I am walking!');
}

uos.classes.entity.prototype.sayHello = function(){
  alert ('hello');
};

uos.classes.node = function() {
	uos.classes.entity.call(this);
};



*/
// inherit entity
//uos.classes.node = function() {
//	uos.classes.entity.call(this);
//};

//uos.classes.node.prototype = new uos.classes.entity();

// correct the constructor pointer because it points to Person
//uos.classes.node.prototype.constructor = uos.classes.node;

// add / replace the sayHello method
//uos.classes.node.prototype.sayHello = function(){
//  alert('hi, I am a student');
//}

// add /replace sayGoodBye method
//uos.classes.node.prototype.sayGoodBye = function(){
//  alert('goodBye');
//}

uos.classes.node = function(initobj) {
	uos.log('node class',initobj);
	this.data = {};
	this.elementid = '';
	//uos.classes.entity.call(this);
	//this.actions.reload.handler = function(data) {
	//	uos.log('bitchin',data);
	//};
	/*
	this.actions.init.handler = function(data) {
		uos.log('init bitchin',data);
	};
	*/
}

uos.classes.node.prototype = new uos.classes.entity();
uos.classes.node.prototype.constructor = new uos.classes.entity;




/*
var test1 = new uos.classes.entity(4);

test1.callaction('reload');

var test2 = new uos.classes.node(8);
test2.callaction('reload');
test1.callaction('reload');
*/